@Library('SnykShared@master')                                                                                                           
import com.symphony.security.containers.Artifactory

// // Our initial list of strings we want to echo in parallel
// def stringsToEcho = ["cat /etc/os-release", "cat /etc/passwd", "ls /var"]

// // The map we'll store the parallel steps in before executing them.
// def stepsForParallel = stringsToEcho.collectEntries {
//     ["echoing ${it}" : transformIntoStep(it)]
// }

// // Actually run the steps in parallel - parallel takes a map as an argument,
// // hence the above.
// parallel stepsForParallel

// // Take the string and echo it.
// def transformIntoStep(inputString) {
//     // We need to wrap what we return in a Groovy closure, or else it's invoked
//     // when this method is called, not when we pass it to parallel.
//     // To do this, you need to wrap the code below in { }, and either return
//     // that explicitly, or use { -> } syntax.
//     return {
//         node {
//             echo inputString
//             sh "docker run --rm -i alpine:3.13 ${inputString}"
//         }
//     }
// }

properties([    
   parameters([    
     stringParam(name: 'snyk_org', defaultValue: '', description: "Snyk Org Id (not name), should have a token valid"),
     stringParam(name: 'prj_repo', defaultValue: '', description: "Git repo without protocol"),
     stringParam(name: 'git_hash', defaultValue: '', description: "branch | hash"),
     stringParam(name: 'snyk_scan', defaultValue: '', description: "test | monitor"),
     stringParam(name: 'prj_type', defaultValue: 'nodejs', description: "nodejs | java"),
     stringParam(name: 'node_version', defaultValue: '10.21.0', description: "nodejs version"),
     stringParam(name: 'java_version', defaultValue: '8', description: "8 | 11")
   ])    
 ])    
  

node {
    def snyk_image = 'slex-reg-test/snyk-release:experimental'
    def artifactory_url = 'artifact.symphony.com'
    stage('Pre') {
        artfactory = new Artifactory(this)
        artfactory.pull(snyk_image)
    }
    stage('test one job at time') {
        sh 'ls -al  /data/maven'
        sh 'cat /data/maven/settings.xml'
        def secrets = ''
        
        withCredentials([usernamePassword(credentialsId: 'b727f90a-0844-41d8-933b-a9801398bddc', usernameVariable: 'git_username', passwordVariable: 'git_password')]) {
            secrets = " -e GIT_USER='${git_username}' -e GIT_PASS='${git_password}' "
        }
        
        withCredentials([usernamePassword(credentialsId: 'SNYK_BASEIMAGE_TOKEN', usernameVariable: 'FILLER', passwordVariable: 'snyk_token')]) { 
            secrets += " -e SECRET='${snyk_token}' "
        }
        def npmpass = sh (script: "#!/bin/sh -e\n cat /data/nvm/npmrc/npmrc-default | grep _auth | sed 's/_auth=//g'", returnStdout: true).trim()
        secrets += " -e NPM_PASS='${npmpass}' "

        // def mvnpass = sh (script: '#!/bin/sh -e\n grep -oPm1 "(?<=<password>)[^<]+" <<< "$(cat /data/maven/settings.xml)"', returnStdout: true).trim()
        def mvnpass = sh (script: "#!/bin/sh -e\n awk -F'[<>]' '/<password>/{print $3}' /data/maven/settings.xml | head -1", returnStdout: true).trim()
        echo 'XXX'
        echo "${mvnpass}"
        echo 'XXX'

        // sh ("""#!/bin/sh -e\n docker run --rm \
        //        ${secrets} \
        //        -e SNYK_ORG='${params.snyk_org}' \
        //        -e PRJ_REPO='${params.prj_repo}' \
        //        -e GIT_HASH='${params.git_hash}' \
        //        -e SNYK_SCAN='${params.snyk_scan}' \
        //        ${artifactory_url}/${snyk_image} scan_node_prj.sh""")
    }
}

// node {

//     def snyk_image = 'slex-reg-test/snyk-release:experimental'
//     def artifactory_url = 'artifact.symphony.com'
//     stage('Hello World') {
//         echo 'hello World'
//         sh 'pwd'
//         sh 'docker --version'
//     }

//     stage('Test parallel') {
//             parallel (
//                 'a': {
//                     sh 'docker run --rm -i alpine:3.13 cat /etc/os-release'
//                     echo 'DONE with Alpine'
//                 },
//                 'b' : {
//                     sh 'docker run --rm -i busybox /sh/busybox'
//                     echo 'DONE with busybox'
//                 },
//                 'c': {
//                     sh 'docker run --rm -i ubuntu:20.04 cat /etc/os-release'
//                     echo 'DONE with ubuntu'
//                 }
//             )
//     }

    // stage('get stuff') {
    //     artfactory = new Artifactory(this)
    //     artfactory.pull(snyk_image)

        
    //     withCredentials([usernamePassword(credentialsId: 'githubaccess', usernameVariable: 'git_username', passwordVariable: 'git_password')]) {
    //         def params = "-e GIT_USER=${git_username} -e GIT_PASS=${git_password}"
    //         params += " -e MVN_PASS='' -e NPM_PASS='' "
    //         params += " -e SNYK_SCAN='test' -e SNYK_TOKEN='' -e SNYK_ORG='' -e PRJ_REPO='github.com/SymphonyOSF/SFE-Client-App.git' "
    //         params += " -e PRJ=SFE-Client-App -e GIT_HASH=20.12 " 
    //         sh "docker run --rm ${params} ${artifactory_url}/${snyk_image} scan_node_prj.sh"
    //     }
    // }
// }

        
