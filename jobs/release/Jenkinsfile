@Library('SnykShared@master')                                                                                                           
import com.symphony.security.containers.Artifactory

// // Our initial list of strings we want to echo in parallel
// def stringsToEcho = ["cat /etc/os-release", "cat /etc/passwd", "ls /var"]

// // The map we'll store the parallel steps in before executing them.
// def stepsForParallel = stringsToEcho.collectEntries {
//     ["echoing ${it}" : transformIntoStep(it)]
// }

// // Actually run the steps in parallel - parallel takes a map as an argument,
// // hence the above.
// parallel stepsForParallel

// // Take the string and echo it.
// def transformIntoStep(inputString) {
//     // We need to wrap what we return in a Groovy closure, or else it's invoked
//     // when this method is called, not when we pass it to parallel.
//     // To do this, you need to wrap the code below in { }, and either return
//     // that explicitly, or use { -> } syntax.
//     return {
//         node {
//             echo inputString
//             sh "docker run --rm -i alpine:3.13 ${inputString}"
//         }
//     }
// }

properties([    
   parameters([    
     stringParam(name: 'VAR1', defaultValue: 'grouk', description: "filler")
   ])    
 ])    
  

node {
    def snyk_image = 'slex-reg-test/snyk-release:experimental'
    def artifactory_url = 'artifact.symphony.com'
    stage('Pre') {
        artfactory = new Artifactory(this)
        artfactory.pull(snyk_image)
    }
    stage('test one job at time') {
        def xxx = ''
        def npm = ''
        withCredentials([usernamePassword(credentialsId: 'b727f90a-0844-41d8-933b-a9801398bddc', usernameVariable: 'git_username', passwordVariable: 'git_password')]) {
            xxx = " -e GIT_USER=\"${git_username}\" -e GIT_PASS=\"${git_password}\" "
        }
     
        // withCredentials([[$class: 'StringBinding', credentialsId: 'npmrcFile', variable: 'npmrc']]) {
        //     npm = " ${npmrc} "
        // }
        
        withCredentials([usernamePassword(credentialsId: 'SNYK_BASEIMAGE_TOKEN', usernameVariable: 'FILLER', passwordVariable: 'snyk_token')]) { 
            xxx += " -e SECRET=\"${snyk_token}\" "
        }

        echo "XXX"
        sh 'ls -al  /data/nvm/npmrc'
        echo "xxx"
        snyk_org = '16df2e12-d4cb-400d-aaf2-547db9ff07e9'
        prj_repo = 'github.com/SymphonyOSF/SFE-Login.git'
        prj = 'SFE-Login'
        git_hash = '20.12'
        snyk_scan = 'test'
        echo "HELLO ${params.VAR1}"
        // sh "docker run --rm ${xxx}  -e SNYK_ORG=\"${snyk_org}\" -e PRJ_REPO=\"${prj_repo}\" -e PRJ=\"${prj}\" -e GIT_HASH=\"${git_hash}\" -e SNYK_SCAN=\"${snyk_scan}\" ${artifactory_url}/${snyk_image} scan_node_prj.sh"
    }
}

// node {

//     def snyk_image = 'slex-reg-test/snyk-release:experimental'
//     def artifactory_url = 'artifact.symphony.com'
//     stage('Hello World') {
//         echo 'hello World'
//         sh 'pwd'
//         sh 'docker --version'
//     }

//     stage('Test parallel') {
//             parallel (
//                 'a': {
//                     sh 'docker run --rm -i alpine:3.13 cat /etc/os-release'
//                     echo 'DONE with Alpine'
//                 },
//                 'b' : {
//                     sh 'docker run --rm -i busybox /sh/busybox'
//                     echo 'DONE with busybox'
//                 },
//                 'c': {
//                     sh 'docker run --rm -i ubuntu:20.04 cat /etc/os-release'
//                     echo 'DONE with ubuntu'
//                 }
//             )
//     }

    // stage('get stuff') {
    //     artfactory = new Artifactory(this)
    //     artfactory.pull(snyk_image)

        
    //     withCredentials([usernamePassword(credentialsId: 'githubaccess', usernameVariable: 'git_username', passwordVariable: 'git_password')]) {
    //         def params = "-e GIT_USER=${git_username} -e GIT_PASS=${git_password}"
    //         params += " -e MVN_PASS='' -e NPM_PASS='' "
    //         params += " -e SNYK_SCAN='test' -e SNYK_TOKEN='' -e SNYK_ORG='' -e PRJ_REPO='github.com/SymphonyOSF/SFE-Client-App.git' "
    //         params += " -e PRJ=SFE-Client-App -e GIT_HASH=20.12 " 
    //         sh "docker run --rm ${params} ${artifactory_url}/${snyk_image} scan_node_prj.sh"
    //     }
    // }
// }

        
